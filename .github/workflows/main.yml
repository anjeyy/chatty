name: Publish Docker images
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened, closed ]


jobs:
  build-jar:
    name: Test & Build JAR-file
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots verify

      - name: Save artifacts for other jobs
        run: |
          mkdir -p path/to/artifact
          cp ./client/target/client*.jar path/to/artifact
          cp ./server/target/server*.jar path/to/artifact
          ls -la path/to/artifact

      - name: Upload saved artifacts
        uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: path/to/artifact
          retention-days: 1
          if-no-files-found: error

  push-server-and-client-to-registry:
    name: Integration Test specific Docker build
    runs-on: ubuntu-latest
    needs:
      - build-jar

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: my-artifact
          path: path/to/artifact

      - name: Create directory and copy artifacts
        run: |
          mkdir -p server/target
          cp path/to/artifact/server*.jar server/target
          ls -la server/target

          mkdir -p client/target
          cp path/to/artifact/client*.jar client/target
          ls -la client/target

      - name: Build & Push server to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./server
          file: ./server/Dockerfile
          tags: anjeyy/chatty:server-ci-latest
          pull: true
          push: true
          no-cache: true

      - name: Build & Push client to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./client
          file: ./client/Dockerfile
          tags: anjeyy/chatty:client-ci-latest
          pull: true
          push: true
          no-cache: true

  run-integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs:
      - push-server-and-client-to-registry

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Install socat
        run: sudo apt-get install socat

      - name: Integration Test - Chatting test (with two clients)
        run: |
          cd ./integration-test
          chmod a+rwx chatting-test.sh
          ./chatting-test.sh

      - name: Integration Test - Client reconnect BEFORE server startup
        run: |
          cd ./integration-test
          chmod a+rwx reconnect-before-server-startup-test.sh
          ./reconnect-before-server-startup-test.sh

      - name: Integration Test - Client reconnect AFTER server crashes
        run: |
          cd ./integration-test
          chmod a+rwx reconnect-after-server-crash-test.sh
          ./reconnect-after-server-crash-test.sh

  push-server-to-registry:
    name: Docker Build & Push Server
    runs-on: ubuntu-latest
    needs:
      - build-jar
      - run-integration-tests

    #    if: github.event.pull_request.merged
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: my-artifact
          path: path/to/artifact

      - name: Create directory and copy artifacts
        run: |
          mkdir -p server/target
          cp path/to/artifact/server*.jar server/target
          ls -la server/target

      - name: Build & Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./server
          file: ./server/Dockerfile
          tags: anjeyy/chatty:server-latest
          pull: true
          push: true
          no-cache: true

